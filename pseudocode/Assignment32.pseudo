//Pseudocode for fibonacci number using recursive approach
Start
    //Recursive approach to calculate the nth Fibonacci number
        Function fibonacci(n):
            If n==0 or n==1:        //Base case : if n equals to zero or one then it will start returning
                return n 
            Else:
                return fibonacci(n - 1) + fibonacci(n - 2) //recursively  calling function to get summation of privious two terms
            EndIf 
        EndFunction
End

Efficiency Analysis:

Time Complexity: The time complexity of the iterative Fibonacci function is linear, O(n), as it iterates through the loop exactly n times to compute the nth Fibonacci number. This results in a much more efficient algorithm compared to the recursive approach, especially for large values of n.

Space Complexity: The space complexity of the iterative Fibonacci function is constant, O(1), as it only uses a constant amount of extra space to store variables (fib_prev, fib_curr, fib_next). Unlike the recursive approach, there is no additional space required for function call stacks, making it more memory-efficient.
// Recursive Approach:

// Pros:
// Simple and easy to understand.
// Follows the mathematical definition of Fibonacci sequence directly.
// Cons:
// Exponential time complexity leads to inefficiency for large inputs.
// Exponential space complexity can cause stack overflow errors for large inputs.

// Iterative Approach:

// Pros:
// Linear time complexity results in better efficiency, especially for large inputs.
// Constant space complexity makes it more memory-efficient.
// Cons:
// Slightly more complex due to the use of loops and additional variables.
// Doesn't directly follow the mathematical definition, may require a bit of understanding to grasp the iterative process.

// function fibonacci(n):
//     if n equals 0:
//         return 0
//     else if n equals 1:
//         return 1
//     else:
//         fib_prev = 0
//         fib_curr = 1
//         for i from 2 to n:
//             fib_next = fib_prev + fib_curr
//             fib_prev = fib_curr
//             fib_curr = fib_next
//         return fib_curr
